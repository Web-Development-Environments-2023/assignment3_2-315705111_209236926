openapi: 3.0.0
info:
  title: Recipes api
  description: API for recipes project
  version: 1.0.1
servers:
# local:
- url: "http://127.0.0.1:3000"
# remote:
# - url: "http://132.72.65.211"
  description: SwaggerHub API Auto Mocking hey
tags:
- name: Auth
  description: All authentication related routes
- name: Users
  description: All the user's personal app info
- name: Recipes
  description: All reciepes general info
paths:
  /register:
    post:
      tags:
      - Auth
      summary: A new user from the client is added to the server
      description: A JSON object contains all the details about the new user.
      requestBody:
        description: Inventory item to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "201":
          description: A new user has been added
        "400":
          description: wrong input parameters
  /login:
    post:
      tags:
      - Auth
      summary: Login an exist user
      description: An exist user login to the system
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginScheme'
        required: true
      responses:
        "200":
          description: |
            User was found in the DB and authenitcated successfully. The session ID is returned in a cookie named `session`.  You should include this cookie in subsequent requests
          headers:
            Set-Cookie:
              style: simple
              explode: false
              schema:
                type: string
                example: session=87s97sdhgf279293f8w0e9
        "401":
          description: Authentication failed
  /logout:
    post:
      tags:
        - Auth
      summary: logout a user from the system and delete his cookie
      responses:
        "200":
          description: "the user has ben successfully logged out"
  /users/favorites:
    get:
      tags:
      - Users
      summary: Return the favorite recipes that were saved by user
      description: Get an array of recipes that were saved by a specific user
      responses:
        "200":
          description: data about the user's favorites recipes returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
    post:
      tags:
      - Users
      summary: save recipe in the favorites list of a user
      description: save recipe in the favorites list of a user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                recipeId:
                  type: string
                  description: reciepe's id which the user saved
                  example: 716429
      responses:
        "200":
          description: The Recipe successfully saved as favorite
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
  /users/createRecipe:
    post:
      tags:
        - recipe
      summary: create a new recipe
      description: A JSON/YAML file contains everything needed for recipe creating
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Recipe'
        description: recipe to add
      responses:
        '201':
          description: A new recipe has been added
        '400':
          description: Wrong input data
  /recipes/{recipeId}:
    get:
      tags:
      - Recipes
      summary: Return preview details on recipe by his ID
      description: Return preview details on recipe by his ID
      parameters:
      - name: recipeId
        in: path
        description: recipe's id
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: data about the recipe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipePreview'
        "404":
          description: recipeId is not exists
  /recipes/rand:
    get:
      tags: 
        - recipe
      summary: get 3 random recipes
      description: return 3 random recepice for the home page to view
      operationId: getRecipeArrayRand
      responses:
        '200':
          description: we got the recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
        '206':
          description: user have less then 3 recipes.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
        '400':
          description: Something went wrong
  /users/last:
    get:
      tags: 
      - reicpe
      - users
      summary: get last 3 recipes for a specific user
      description: get the last 3 recipes that a user visited in
      operationId: last3
      responses:
        '200':
          description: successfully show the 3 recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
              
        '206':
          description: user have less then 3 last visited recipes.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        '400':
          description: user not found
  /users/own:
    get:
      tags: 
      - reicpe
      - users
      summary: get user's self created recipes
      description: get the recipes that the user created
      operationId: own
      responses:
        '200':
          description: successfully showed the favorite recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        '400':
          description: user not found
  /users/family:
    get:
      tags: 
      - users
      summary: get user's family created recipes
      description: get the recipes that the user's family own
      operationId: family
      responses:
        '200':
          description: successfully showed the family recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FamilyRecipe'
        '400':
          description: user not found
  /recipes/searchRecipe:
    get:
      tags:
        - recipe
      summary: Perform a search
      parameters:
        - in: header
          name: searchText
          schema:
            type: string
          description: The search string that will be used
          example: Simple potatoes in the oven
        - in: header
          name: limit
          schema:
            type: number
            description: "Integer. 5(default), 10, or 15. Used to specify the desired number of recipes."
            example: 10
            enum:
              - 5
              - 10
              - 15
        - in: header
          name: cuisines
          schema:
            type: array
            items:
              type: string
              enum:
                - African
                - Asian
                - American
                - British
                - Cajun
                - Caribbean
                - Chinese
                - Eastern European
                - European
                - French
                - German
                - Greek
                - Indian
                - Irish
                - Italian
                - Japanese
                - Jewish
                - Korean
                - Latin American
                - Mediterranean
                - Mexican
                - Middle Eastern
                - Nordic
                - Southern
                - Spanish
                - Thai
                - Vietnamese
          description: Enum to filter to specific cuisines or none (empty means none).
          example: [Indian, Italian]
        - in: header
          name: diets
          schema:
            type: array
            items:
              type: string
              enum:
                - Gluten Free
                - Ketogenic
                - Vegetarian
                - Lacto-Vegetarian
                - Ovo-Vegetarian
                - Vegan
                - Pescetarian
                - Paleo
                - Primal
                - Low FODMAP
                - Whole30
          description: Text to filter by dietary restrictions or none (empty means none).
          example: [Gluten Free, Vegan]
        - in: header
          name: intolerances
          schema:
            type: array
            items:
              type: string
              enum:
                - Dairy
                - Egg
                - Gluten
                - Grain
                - Peanut
                - Seafood
                - Sesame
                - Shellfish
                - Soy
                - Sulfite
                - Tree Nut
                - Wheat
          description: Text to filter by food intolerance or none (empty means none).
          example: [Dairy, Gluten]
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
  
components:
  schemas:
    User:
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username conatins between 3 to 8 letters only
          example: my_name
        firstname:
          type: string
          description: user's first name
          example: my_first_name
        lastname:
          type: string
          description: user's last name
          example: my_last_name
        country:
          type: string
          description: user's country
          example: Israel
        password:
          maxLength: 10
          minLength: 5
          type: string
          description: password conatins between 5 to 10 chars, at least one of them
            is a number and a special char
          format: password
          example: my_name@12
        email:
          pattern: email
          type: string
          description: user's email
          example: my_name12@gmail.com
        profilePic:
          pattern: URL
          type: string
          description: URL for the user's image
          example: s
      description: Model containing user info
    LoginScheme:
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username conatins letters only
        password:
          maxLength: 10
          minLength: 5
          description: password conatins at least one number and one special char
          format: password
      example:
        username: my_name
        password: my_name@12
    RecipePreview:
      type: object
      properties:
        id:
          type: integer
          description: recipe identifier
          example: 102
        title:
          type: string
          description: recipe name
          example: Simple Macaroni and Cheese
        image:
          type: string
          description: recipe image
          format: URL
          example: https://spoonacular.com/recipeimages/655455-566x370.jpg
        readyInMinutes:
          type: integer
          description: the time takes to make this recipe
          example: 45
        popularity:
          type: integer
          description: how many likes got this recipe
          example: 5987
        vegetarian:
          type: boolean
          description: indication if the recipe is vegetarian
          example: false
        vegan:
          type: boolean
          description: indication if the recipe is vegan
          example: false
        glutenFree:
          type: boolean
          description: indication if the recipe is gluten free
          example: false
    Recipe:
      allOf:
        - $ref: '#/components/schemas/RecipePreview'
        - type: object
          properties:
            isClicked:
              type: boolean
            Favorite:
              type: boolean
            ingredients:
              type: array
              items:
                type: object
                properties:
                  ingredient:
                    type: string
                  amount:
                    type: string
                required: 
                  - ingredient
                  - amount
            instructions:
              type: string
            servings:
              type: integer
            description: 
              type: string
              description: the recipe itself
    FamilyRecipe:
        type: object
        properties:
          user_id:
            type: integer
          image:
            type: string
          title:
            type: string
          origin:
            type: string
          occasion:
            type: string
          ingredients:
            type: array
            items:
              type: string
              format: binary
          instructions:
            type: string
          readyInMinutes:
            type: integer
